import streamlit as st
import pandas as pd
import joblib
import string
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# ƒê·ªçc file CSS v·ªõi UTF-8
with open("style.css", "r", encoding="utf-8") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.title("·ª®ng d·ª•ng Nh·∫≠n di·ªán C·∫£m x√∫c")
# --------------------------------------------------------
# |             ·ª®NG D·ª§NG PH√ÇN LO·∫†I C·∫¢M X√öC                |
# --------------------------------------------------------
# | M·ª•c ƒë√≠ch: X√°c ƒë·ªãnh c·∫£m x√∫c c·ªßa c√¢u vƒÉn b·∫°n nh·∫≠p v√†o   |
# --------------------------------------------------------
# | Nh·∫≠p c√¢u c·ªßa b·∫°n: [ Textbox ]                         |
# |                                                       |
# | [ N√∫t: Ph√¢n lo·∫°i c·∫£m x√∫c ]                            |
# --------------------------------------------------------
# | K·∫øt qu·∫£:                                           |
# |    - Nh√£n d·ª± ƒëo√°n: Positive / Negative / Neutral      |
# |    - X√°c su·∫•t: 85%                                    |
# --------------------------------------------------------
# | Th√™m: (t√πy ch·ªçn)                                      |
# |   - L·ªãch s·ª≠ c√°c c√¢u ƒë√£ nh·∫≠p                           |
# |   - Bi·ªÉu ƒë·ªì c·ªôt t·ªâ l·ªá d·ª± ƒëo√°n                         |
# --------------------------------------------------------
model = joblib.load("../Save_Model/sentiment_model.pkl")
vectorizer = joblib.load("../Save_Model/tfidf_vectorizer.pkl")

def preprocess(text):
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = word_tokenize(text)
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    return " ".join(tokens)




st.header("M·ª•c ƒë√≠ch: X√°c ƒë·ªãnh c·∫£m x√∫c c·ªßa c√¢u vƒÉn b·∫°n nh·∫≠p v√†o")

# --- Kh·ªüi t·∫°o l·ªãch s·ª≠ ---
if "history" not in st.session_state:
    st.session_state.history = []  # [(text, label)]
    
sentence = st.text_input("Nh·∫≠p c√¢u c·ªßa b·∫°n:")

if st.button("Ph√¢n lo·∫°i c·∫£m x√∫c"):
    if sentence.strip():
        # 1. Ti·ªÅn x·ª≠ l√Ω
        processed_text = preprocess(sentence)

        # 2. Vector h√≥a
        vector_input = vectorizer.transform([processed_text])

        # 3. D·ª± ƒëo√°n
        prediction = model.predict(vector_input)[0]

        # 4. Hi·ªÉn th·ªã k·∫øt qu·∫£
        if prediction == "positive":
            st.success("Positive üòç")
        elif prediction == "negative":
            st.error("Negative üò°")
        else:
            st.info("Neutral üòê")  # n·∫øu c√≥ train trung t√≠nh

        # 5. L∆∞u l·ªãch s·ª≠
        st.session_state.history.append((sentence, prediction))
    else:
        st.warning("Vui l√≤ng nh·∫≠p c√¢u tr∆∞·ªõc khi ph√¢n lo·∫°i!")
        
#  Hi·ªÉn th·ªã l·ªãch s·ª≠ 
if st.session_state.history:
    st.subheader(" L·ªãch s·ª≠ c√°c c√¢u ƒë√£ nh·∫≠p")
    df_history = pd.DataFrame(st.session_state.history, columns=["C√¢u", "K·∫øt qu·∫£"])
    st.table(df_history)

# V·∫Ω bi·ªÉu ƒë·ªì 
    st.subheader(" T·ªâ l·ªá d·ª± ƒëo√°n")
    
    counts = df_history["K·∫øt qu·∫£"].value_counts()
    st.bar_chart(counts)
    
